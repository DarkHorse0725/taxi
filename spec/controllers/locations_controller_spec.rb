require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::LocationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Location. As you add validations to Location, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:location).attributes.symbolize_keys
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:location,
      pickup_address: nil,
      dropoff_address: nil
    )
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LocationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all locations as @locations" do
      location = Location.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:locations)).to eq([location])
    end
  end

  describe "GET #show" do
    it "assigns the requested location as @location" do
      location = Location.create! valid_attributes
      get :show, params: {id: location.to_param}, session: valid_session
      expect(assigns(:location)).to eq(location)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Location" do
        expect {
          post :create, params: {location: valid_attributes}, session: valid_session
        }.to change(Location, :count).by(1)
      end

      it "assigns a newly created location as @location" do
        post :create, params: {location: valid_attributes}, session: valid_session
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end

      it "redirects to the created location" do
        post :create, params: {location: valid_attributes}, session: valid_session
        expect(response).to have_http_status(201)
      end
    end

    context "with invalid params" do
      it "does not save the new location" do
        expect{
          post :create, params: {location: invalid_attributes}, session: valid_session
        }.to_not change(Location, :count)
      end

      it "returns location not found with status 404" do
        post :create, params: {location: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(404)
      end
    end
  end

  describe "PUT #update" do
    before :each do
      @location = Location.create! valid_attributes
    end

    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:location,
          pickup_address: "Narva maantee 25, 51009 Tartu, Estonia",
        )
      }

      it "updates the requested location" do
        put :update, params: {id: @location.to_param, location: new_attributes}, session: valid_session
        @location.reload
        new_attributes.each_pair do |key, value|
          expect(@location[key]).to eq(value)
        end
      end

      it "assigns the requested location as @location" do
        put :update, params: {id: @location.to_param, location: valid_attributes}, session: valid_session
        expect(assigns(:location)).to eq(@location)
      end

      it "redirects to the location" do
        put :update, params: {id: @location.to_param, location: valid_attributes}, session: valid_session
        expect(response).to have_http_status(200)
      end
    end

    context "with invalid params" do
      it "locates the requested @location" do
        put :update, params: {id: @location.to_param, location: invalid_attributes}, session: valid_session
        expect(assigns(:location)).to eq(@location)
      end

      it "does not change @location's attributes" do
        put :update, params: {id: @location.to_param, location: invalid_attributes}, session: valid_session
        @location.reload
        expect(@location.pickup_address).not_to eq("TÜ üliõpilaselamu, 51009 Tartu, Estonia")
        expect(@location.dropoff_address).not_to eq("Juhan Liivi 2, 50409 Tartu, Estonia")
      end
    end
  end

  describe "DELETE #destroy" do
    before :each do
      @location = Location.create! valid_attributes
    end

    it "destroys the requested location" do
      expect {
        delete :destroy, params: {id: @location.to_param}, session: valid_session
      }.to change(Location, :count).by(-1)
    end

  end

end
